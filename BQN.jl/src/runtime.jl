module Runtime

module R1
import ....provide, ....runtime_0, ....str
include("./r1.jl")
end

import ..run
import ..none, ..F, ..FN, ..TR2D, ..TR3D, ..TR3O

const _runtime, set_prims, set_inv = run("<none>", R1.value...)

const _runtime_length = length(_runtime)
const _runtime_indices = IdDict(洧뎽 => idx - 1
                                for (idx, 洧뎽) in enumerate(_runtime))

prim_ind(洧돋, 洧돌) = get(_runtime_indices, 洧돌, _runtime_length)

function decompose(洧돋, 洧돌)
  kind =
    if     洧돌 in _runtime;                 [0, 洧돌]
    elseif isa(洧돌, F) && 洧돌.洧뎾 !== nothing;  [5, 洧돌.洧뎽, 洧돌.洧돆, 洧돌.洧뎾]
    elseif isa(洧돌, FN) && 洧돌.洧뎾 !== nothing; [5, 洧돌.洧뎽, 洧돌.洧돆, 洧돌.洧뎾]
    elseif isa(洧돌, F) && 洧돌.洧뎽 !== nothing;  [4, 洧돌.洧뎽, 洧돌.洧돆]
    elseif isa(洧돌, FN) && 洧돌.洧뎽 !== nothing; [4, 洧돌.洧뎽, 洧돌.洧돆]
    elseif isa(洧돌, F);                     [1, 洧돌]
    elseif isa(洧돌, FN);                    [1, 洧돌]
    elseif isa(洧돌, TR2D);                  [2, 洧돌.h, 洧돌.洧뎾]
    elseif isa(洧돌, TR3D);                  [3, 洧돌.洧뎾, 洧돌.h, 洧돌.洧뎽]
    elseif isa(洧돌, TR3O);                  [3, 洧돌.洧뎾, 洧돌.h, 洧돌.洧뎽]
    else                                  [-1, 洧돌]
    end
  kind
end

set_prims(none, [decompose, prim_ind])

runtime(n::Int64) = _runtime[n + 1]

export runtime, _runtime

end
